/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.sargunv.pokekotlin.apis

import dev.sargunv.pokekotlin.models.EncounterConditionDetail
import dev.sargunv.pokekotlin.models.EncounterConditionValueDetail
import dev.sargunv.pokekotlin.models.EncounterMethodDetail
import dev.sargunv.pokekotlin.models.PaginatedEncounterConditionSummaryList
import dev.sargunv.pokekotlin.models.PaginatedEncounterConditionValueSummaryList
import dev.sargunv.pokekotlin.models.PaginatedEncounterMethodSummaryList
import dev.sargunv.pokekotlin.models.PokemonEncountersRetrieve200ResponseInner

import dev.sargunv.pokekotlin.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

public open class EncountersApi : ApiClient {

    public constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    public constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * List encounter conditions
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedEncounterConditionSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterConditionList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedEncounterConditionSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-condition/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get encounter condition
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * @param id This parameter can be a string or an integer.
     * @return EncounterConditionDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterConditionRetrieve(id: kotlin.String): HttpResponse<EncounterConditionDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-condition/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List encounter condition values
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedEncounterConditionValueSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterConditionValueList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedEncounterConditionValueSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-condition-value/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get encounter condition value
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * @param id This parameter can be a string or an integer.
     * @return EncounterConditionValueDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterConditionValueRetrieve(id: kotlin.String): HttpResponse<EncounterConditionValueDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-condition-value/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List encounter methods
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedEncounterMethodSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterMethodList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedEncounterMethodSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-method/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get encounter method
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * @param id This parameter can be a string or an integer.
     * @return EncounterMethodDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun encounterMethodRetrieve(id: kotlin.String): HttpResponse<EncounterMethodDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/encounter-method/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get pokemon encounter
     * Handles Pokemon Encounters as a sub-resource.
     * @param pokemonId 
     * @return kotlin.collections.List<PokemonEncountersRetrieve200ResponseInner>
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun pokemonEncountersRetrieve(pokemonId: kotlin.String): HttpResponse<kotlin.collections.List<PokemonEncountersRetrieve200ResponseInner>> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/pokemon/{pokemon_id}/encounters".replace("{" + "pokemon_id" + "}", "$pokemonId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<PokemonEncountersRetrieveResponse>().map { value }
    }

    @Serializable(PokemonEncountersRetrieveResponse.Companion::class)
    private class PokemonEncountersRetrieveResponse(val value: List<PokemonEncountersRetrieve200ResponseInner>) {
        companion object : KSerializer<PokemonEncountersRetrieveResponse> {
            private val serializer: KSerializer<List<PokemonEncountersRetrieve200ResponseInner>> = serializer<List<PokemonEncountersRetrieve200ResponseInner>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: PokemonEncountersRetrieveResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = PokemonEncountersRetrieveResponse(serializer.deserialize(decoder))
        }
    }

}
