/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.sargunv.pokekotlin.apis

import dev.sargunv.pokekotlin.models.GenerationDetail
import dev.sargunv.pokekotlin.models.PaginatedGenerationSummaryList
import dev.sargunv.pokekotlin.models.PaginatedPokedexSummaryList
import dev.sargunv.pokekotlin.models.PaginatedVersionGroupSummaryList
import dev.sargunv.pokekotlin.models.PaginatedVersionSummaryList
import dev.sargunv.pokekotlin.models.PokedexDetail
import dev.sargunv.pokekotlin.models.VersionDetail
import dev.sargunv.pokekotlin.models.VersionGroupDetail

import dev.sargunv.pokekotlin.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

public open class GamesApi : ApiClient {

    public constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    public constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * List genrations
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedGenerationSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun generationList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedGenerationSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/generation/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get genration
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * @param id This parameter can be a string or an integer.
     * @return GenerationDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun generationRetrieve(id: kotlin.String): HttpResponse<GenerationDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/generation/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List pokedex
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedPokedexSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun pokedexList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedPokedexSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/pokedex/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get pokedex
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * @param id This parameter can be a string or an integer.
     * @return PokedexDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun pokedexRetrieve(id: kotlin.String): HttpResponse<PokedexDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/pokedex/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List version groups
     * Version groups categorize highly similar versions of the games.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedVersionGroupSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun versionGroupList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedVersionGroupSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/version-group/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get version group
     * Version groups categorize highly similar versions of the games.
     * @param id This parameter can be a string or an integer.
     * @return VersionGroupDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun versionGroupRetrieve(id: kotlin.String): HttpResponse<VersionGroupDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/version-group/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List versions
     * Versions of the games, e.g., Red, Blue or Yellow.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedVersionSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun versionList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedVersionSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/version/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get version
     * Versions of the games, e.g., Red, Blue or Yellow.
     * @param id This parameter can be a string or an integer.
     * @return VersionDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun versionRetrieve(id: kotlin.String): HttpResponse<VersionDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/version/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
