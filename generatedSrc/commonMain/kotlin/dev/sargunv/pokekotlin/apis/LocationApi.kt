/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.sargunv.pokekotlin.apis

import dev.sargunv.pokekotlin.models.LocationAreaDetail
import dev.sargunv.pokekotlin.models.LocationDetail
import dev.sargunv.pokekotlin.models.PaginatedLocationAreaSummaryList
import dev.sargunv.pokekotlin.models.PaginatedLocationSummaryList
import dev.sargunv.pokekotlin.models.PaginatedPalParkAreaSummaryList
import dev.sargunv.pokekotlin.models.PaginatedRegionSummaryList
import dev.sargunv.pokekotlin.models.PalParkAreaDetail
import dev.sargunv.pokekotlin.models.RegionDetail

import dev.sargunv.pokekotlin.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

public open class LocationApi : ApiClient {

    public constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    public constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * List location areas
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedLocationAreaSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun locationAreaList(limit: kotlin.Int? = null, offset: kotlin.Int? = null): HttpResponse<PaginatedLocationAreaSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/location-area/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get location area
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * @param id A unique integer value identifying this location area.
     * @return LocationAreaDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun locationAreaRetrieve(id: kotlin.Int): HttpResponse<LocationAreaDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/location-area/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List locations
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedLocationSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun locationList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedLocationSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/location/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get location
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * @param id This parameter can be a string or an integer.
     * @return LocationDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun locationRetrieve(id: kotlin.String): HttpResponse<LocationDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/location/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List pal park areas
     * Areas used for grouping Pokémon encounters in Pal Park. They&#39;re like habitats that are specific to Pal Park.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedPalParkAreaSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun palParkAreaList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedPalParkAreaSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/pal-park-area/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get pal park area
     * Areas used for grouping Pokémon encounters in Pal Park. They&#39;re like habitats that are specific to Pal Park.
     * @param id This parameter can be a string or an integer.
     * @return PalParkAreaDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun palParkAreaRetrieve(id: kotlin.String): HttpResponse<PalParkAreaDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/pal-park-area/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List regions
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedRegionSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun regionList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedRegionSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/region/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get region
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * @param id This parameter can be a string or an integer.
     * @return RegionDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun regionRetrieve(id: kotlin.String): HttpResponse<RegionDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/region/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
