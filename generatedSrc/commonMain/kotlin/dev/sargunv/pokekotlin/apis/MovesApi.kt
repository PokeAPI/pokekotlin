/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.sargunv.pokekotlin.apis

import dev.sargunv.pokekotlin.models.MoveBattleStyleDetail
import dev.sargunv.pokekotlin.models.MoveDetail
import dev.sargunv.pokekotlin.models.MoveLearnMethodDetail
import dev.sargunv.pokekotlin.models.MoveMetaAilmentDetail
import dev.sargunv.pokekotlin.models.MoveMetaCategoryDetail
import dev.sargunv.pokekotlin.models.MoveTargetDetail
import dev.sargunv.pokekotlin.models.PaginatedMoveBattleStyleSummaryList
import dev.sargunv.pokekotlin.models.PaginatedMoveLearnMethodSummaryList
import dev.sargunv.pokekotlin.models.PaginatedMoveMetaAilmentSummaryList
import dev.sargunv.pokekotlin.models.PaginatedMoveMetaCategorySummaryList
import dev.sargunv.pokekotlin.models.PaginatedMoveSummaryList
import dev.sargunv.pokekotlin.models.PaginatedMoveTargetSummaryList

import dev.sargunv.pokekotlin.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

public open class MovesApi : ApiClient {

    public constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    public constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * List move meta ailments
     * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveMetaAilmentSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveAilmentList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveMetaAilmentSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-ailment/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move meta ailment
     * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
     * @param id This parameter can be a string or an integer.
     * @return MoveMetaAilmentDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveAilmentRetrieve(id: kotlin.String): HttpResponse<MoveMetaAilmentDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-ailment/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List move battle styles
     * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveBattleStyleSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveBattleStyleList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveBattleStyleSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-battle-style/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move battle style
     * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
     * @param id This parameter can be a string or an integer.
     * @return MoveBattleStyleDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveBattleStyleRetrieve(id: kotlin.String): HttpResponse<MoveBattleStyleDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-battle-style/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List move meta categories
     * Very general categories that loosely group move effects.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveMetaCategorySummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveCategoryList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveMetaCategorySummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-category/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move meta category
     * Very general categories that loosely group move effects.
     * @param id This parameter can be a string or an integer.
     * @return MoveMetaCategoryDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveCategoryRetrieve(id: kotlin.String): HttpResponse<MoveMetaCategoryDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-category/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List move learn methods
     * Methods by which Pokémon can learn moves.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveLearnMethodSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveLearnMethodList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveLearnMethodSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-learn-method/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move learn method
     * Methods by which Pokémon can learn moves.
     * @param id This parameter can be a string or an integer.
     * @return MoveLearnMethodDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveLearnMethodRetrieve(id: kotlin.String): HttpResponse<MoveLearnMethodDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-learn-method/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List moves
     * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move
     * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
     * @param id This parameter can be a string or an integer.
     * @return MoveDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveRetrieve(id: kotlin.String): HttpResponse<MoveDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List move targets
     * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param q &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property.  (optional)
     * @return PaginatedMoveTargetSummaryList
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveTargetList(limit: kotlin.Int? = null, offset: kotlin.Int? = null, q: kotlin.String? = null): HttpResponse<PaginatedMoveTargetSummaryList> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        q?.apply { localVariableQuery["q"] = listOf("$q") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-target/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get move target
     * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
     * @param id This parameter can be a string or an integer.
     * @return MoveTargetDetail
     */
    @Suppress("UNCHECKED_CAST")
    public open suspend fun moveTargetRetrieve(id: kotlin.String): HttpResponse<MoveTargetDetail> {

        val localVariableAuthNames = listOf<String>("basicAuth", "cookieAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/move-target/{id}/".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
